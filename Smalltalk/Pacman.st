Object subclass: #Level	instanceVariableNames: 'cellCnt hWalls wallColor vWalls food foodColor players turn turnLength stepTime turnCounter'	classVariableNames: 'Colors'	poolDictionaries: ''	category: 'Pacman'!!Level methodsFor: 'as yet unclassified' stamp: 'SS 6/25/2012 00:03'!drawOn: aCanvas bounds: bounds	| cellS shift foodS foodShift wallS w h|					cellS := ((bounds width / cellCnt x) min: (bounds height / cellCnt y)) asInteger.	wallS := (cellS / 20) asInteger max: 1.		"to avoid confusiuon in case of notrectangular levels"	w := cellS * cellCnt x.	h := cellS * cellCnt y.	shift := bounds topLeft + (((bounds width - w )/2)@((bounds height - h)/2)).	aCanvas fillRectangle: (shift extent: w@wallS) color:  wallColor.	aCanvas fillRectangle: (0@h + shift extent: w@wallS) color:  wallColor.	aCanvas fillRectangle: (shift extent: wallS@h) color:  wallColor.	aCanvas fillRectangle: (w@0 + shift extent: wallS@h) color:  wallColor.		"walls"	hWalls do: [: loc | aCanvas fillRectangle: (cellS@cellS * loc + shift extent: cellS@wallS) color:  wallColor].		vWalls do: [: loc | aCanvas fillRectangle: (cellS@cellS * loc + shift extent: wallS@cellS) color:  wallColor].			foodS := (cellS / 8 max: 2) asInteger.	foodShift := (cellS /  2) asInteger + shift.	food do: [: loc  | aCanvas fillOval: (Rectangle center: cellS@cellS * loc + foodShift extent: foodS@foodS)   color: foodColor].	 	players doWithIndex: [: player :i | |color eatcolor|		color := Colors at: i.		eatcolor := Colors at: (i + turn \\ players size + 1).		(player alive) ifTrue: [player drawOn: aCanvas shift: shift size: cellS color: color eatcolor: eatcolor]].! !!Level methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 13:41'!initialize	super initialize.		stepTime := 200.	turnLength := 12.	turnCounter := 0. "moves from 1 to 25"	turn := 0. "moves from 1 to number of players".	finished := false.	wallColor := Color black.	foodColor := Color white.		cellCnt := 0@0.	players := OrderedCollection new.	hWalls := Set new.	vWalls := Set new.	food := Set new.! !!Level methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 16:15'!move	| aplayers |		turnCounter := turnCounter + 1 \\ turnLength.	(turnCounter = 0) ifTrue: [turn:= turn + 1 \\ (players size - 1)].	"eat food"	players do: [ :p | | eaten | 		eaten := food select: [ :f | p pos = f ].		food removeAll: eaten.		p addPoints: (eaten size).	].	"find all players valid for movement"	aplayers := players select: [ :p | p alive].			"those that don't drive against a wall"	aplayers := aplayers select: [ :p | 			(((p direction = 0) & (vWalls contains: [:v | v = (p destination)])) |			((p direction = 1) & (hWalls contains: [:v | v = (p pos)])) |			((p direction = 2) & (vWalls contains: [:v | v = (p pos)])) |			((p direction = 3) & (hWalls contains: [:v | v = (p destination)]))) not ].				"and those that don't drive outside the game area"	aplayers := aplayers select: [ :p | 			(p destination x >= 0) &			(p destination x < cellCnt x) &			(p destination y >= 0) &			(p destination y < cellCnt y) ].		"move one guy and check if he is at the same place as anyone else"	aplayers do: [ :p1| 		p1 pos: p1 destination.		players doWithIndex: [ :p2 :i2 | 			((p1 pos) = p2 pos) & (p2 alive) ifTrue: [ |i1 e1 e2|				i1 := players findFirst: [:p| p=p1].				e1 := i1 + turn \\ players size + 1.				e2 := i2 + turn \\ players size + 1.				(e2 = i1) ifTrue: [p1 eats: p2. ^true].				(e1 = i2) ifTrue: [p2 eats: p1. ^true].				] ]. ].		^false. "returns true if finished"	! !!Level methodsFor: 'as yet unclassified' stamp: 'SS 4/28/2012 21:58'!players	^players! !!Level methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 13:36'!stepTime	^stepTime.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Level class	instanceVariableNames: ''!!Level class methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 13:21'!initialize	super initialize.		Colors := OrderedCollection new.	Colors add: Color red.	Colors add: Color yellow.	Colors add: Color green.	Colors add: Color blue.	Colors add: Color white.	Colors add: Color black.! !Level subclass: #Level1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Pacman'!!Level1 methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 15:13'!initialize	super initialize.		cellCnt := 4@4.		players add: (Pacman pos: 0@0  keys: #(29 30 28 31)). "arrowkeys"	players add: (Pacman pos: 1@1  keys: #(100 119 97 115)). "wasd" "i think the characters would work too ^^"	players add: (Pacman pos: 2@2  keys: #(107 117 104  106)). "uhjk"		hWalls add:  0@0.	hWalls add:  1@1.	hWalls add:  2@2.		vWalls add: 0@0.	vWalls add: 1@1.	vWalls add: 2@2.		food add: 0@1.	food add: 0@2.	food add: 0@3.	food add: 1@2.	food add: 1@3.	food add: 2@3.! !Level subclass: #Level2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Pacman'!!Level2 methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 15:45'!initialize	super initialize.		cellCnt := 6@6.		players add: (Pacman pos: 0@0  keys: #(29 30 28 31)). "arrowkeys"	players add: (Pacman pos: 2@2  keys: #(100 119 97 115)). "wasd" "i think the characters would work too ^^"	players add: (Pacman pos: 0@5  keys: #(107 117 104  106)). "uhjk"		"first wall layer"	"hWalls add:  1@1."	hWalls add:  2@1.	hWalls add:  3@1.	hWalls add:  4@1.		hWalls add:  1@5.	hWalls add:  2@5.	hWalls add:  3@5.	"hWalls add:  4@5."		vWalls add:  1@1.	vWalls add:  1@2.	vWalls add:  1@3.	vWalls add:  1@4.		vWalls add:  5@1.	vWalls add:  5@2.	vWalls add:  5@3.	vWalls add:  5@4.		"second wall layer"		"hWalls add:  2@2."	hWalls add:  3@2.	hWalls add:  2@4.	"hWalls add:  3@4."		vWalls add:  2@2.	vWalls add:  2@3.	vWalls add:  4@2.	vWalls add:  4@3.		0 to: 5 do: [:i | 0 to: 5 do: [:j | food add: (i@j)]].	! !Level subclass: #Level3	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Pacman'!!Level3 methodsFor: 'as yet unclassified' stamp: 'SS 6/24/2012 23:47'!initialize	super initialize.		cellCnt := 12@8.		players add: (Pacman pos: 0@0  keys: #(29 30 28 31)). "arrowkeys"	players add: (Pacman pos: 5@2  keys: #(100 119 97 115)). "wasd" "i think the characters would work too ^^"	players add: (Pacman pos: 11@0  keys: #(107 117 104  106)). "uhjk"		"first wall layer"	"hWalls add:  1@1."		1 to: 10 do: [:i | hWalls add: i@4].		1 to: 6 do: [:i | vWalls add: 4@i].	1 to: 6 do: [:i | vWalls add: 8@i].		1 to: 10 do: [:i | 1 to: 6 do: [:j | food add: (i@j)]].	! !Object subclass: #Pacman	instanceVariableNames: 'keys pos direction alive points'	classVariableNames: 'Dirs'	poolDictionaries: ''	category: 'Pacman'!!Pacman methodsFor: 'get&setters' stamp: 'SS 4/29/2012 12:23'!addPoints: pts	points := points + pts.! !!Pacman methodsFor: 'get&setters' stamp: 'SS 4/28/2012 23:39'!alive	^alive.! !!Pacman methodsFor: 'get&setters' stamp: 'SS 4/29/2012 13:45'!alive: live	alive := live.! !!Pacman methodsFor: 'get&setters' stamp: 'SS 4/29/2012 11:36'!direction	^direction.! !!Pacman methodsFor: 'get&setters' stamp: 'SS 4/27/2012 19:24'!keys	^keys.! !!Pacman methodsFor: 'get&setters' stamp: 'SS 4/27/2012 19:28'!keys: newkeys	keys:= newkeys.! !!Pacman methodsFor: 'get&setters' stamp: 'SS 4/29/2012 12:51'!points	^points.! !!Pacman methodsFor: 'get&setters' stamp: 'SS 4/29/2012 12:51'!points:	points.! !!Pacman methodsFor: 'get&setters' stamp: 'SS 4/27/2012 19:24'!pos	^pos.! !!Pacman methodsFor: 'get&setters' stamp: 'SS 4/27/2012 19:24'!pos: newpos	pos := newpos.! !!Pacman methodsFor: 'as yet unclassified' stamp: 'SS 4/28/2012 23:57'!destination			^pos + (Dirs at: (direction + 1)).		! !!Pacman methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 16:25'!drawOn: aCanvas shift: shift size: size color: color eatcolor: bcolor	"draw a Pacman"	| pshift angle mouthangle pi radius resolution totalangle verts eyeangle eyepos eyesize|	pshift := (size /  2) asInteger + shift.		pi := Float pi.	angle := direction * 90 * pi / 180.0.	radius := (size / 2.2) asInteger.	resolution := (size / 2.2) asInteger max: 6.	mouthangle := pi / 4.0.	totalangle := pi - mouthangle *2.	verts := (-1 to: resolution) collect: [: v |  v * totalangle / resolution + mouthangle  + angle ].	verts := verts collect: [:v | ((v cos * radius) asInteger)@(0 - (v sin * radius) asInteger) + (pos * size + pshift)].	verts atWrap:1 put: (pos*size + pshift).		aCanvas drawPolygon: verts color: color borderWidth: 2 borderColor: bcolor.		eyeangle := pi / 2.6 + angle.	eyepos := ((eyeangle cos * radius * 0.7) asInteger)@(0 - (eyeangle sin * radius * 0.7) asInteger abs ) + (pos * size + pshift).	eyesize := (radius / 8) asInteger max: 2.	aCanvas fillOval: (Rectangle origin: eyepos - (eyesize@eyesize) extent: (eyesize*2)@(eyesize*2) ) color: Color black.! !!Pacman methodsFor: 'as yet unclassified' stamp: 'SS 6/24/2012 23:55'!eats: otherMan	"Transcript show: 'EATEN'."	points := otherMan points + points.	otherMan points: 0.	otherMan alive: false.! !!Pacman methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 12:24'!initialize	direction := 0.	alive := true.	points := 0.! !!Pacman methodsFor: 'as yet unclassified' stamp: 'SS 4/28/2012 22:18'!keyPressed: key		(keys doWithIndex: [:v :i | (key == v) ifTrue: [direction:= i - 1]]) .	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pacman class	instanceVariableNames: ''!!Pacman class methodsFor: 'as yet unclassified' stamp: 'SS 4/28/2012 19:41'!initialize	super initialize.			Dirs := Array with: 1@0 with: 0@(-1) with: (-1)@0 with: 0@1.		! !!Pacman class methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 12:50'!pos: pos keys: keys	^ Pacman new pos: pos ;				    keys: keys.! !BorderedMorph subclass: #PacmanMain	instanceVariableNames: 'curLevel levels curLevelIndex'	classVariableNames: ''	poolDictionaries: ''	category: 'Pacman'!!PacmanMain methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 16:24'!drawOn: aCanvas	super drawOn: aCanvas.	curLevel drawOn: (aCanvas asAlphaBlendingCanvas: 0.8) bounds: self bounds.		! !!PacmanMain methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 15:49'!handleKeystroke: anEvent	| keyValue |	keyValue := anEvent keyValue.	"Transcript show: keyValue."	curLevel players do: [: player | player keyPressed: keyValue].! !!PacmanMain methodsFor: 'as yet unclassified' stamp: 'SS 4/27/2012 15:34'!handlesMouseOver: anEvent	"no words"	^true! !!PacmanMain methodsFor: 'as yet unclassified' stamp: 'SS 6/24/2012 23:36'!initialize	super initialize.			levels := OrderedCollection new.	levels add: Level1.	levels add: Level2.	levels add: Level3.		curLevel := Level1 new.	curLevelIndex := 0.! !!PacmanMain methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 12:15'!mouseEnter: anEvent	"comment stating purpose of message"	anEvent hand newKeyboardFocus: self	! !!PacmanMain methodsFor: 'as yet unclassified' stamp: 'SS 4/27/2012 15:24'!mouseLeave: anEvent	anEvent hand newKeyboardFocus: nil! !!PacmanMain methodsFor: 'as yet unclassified' stamp: 'SS 6/24/2012 23:57'!step	super step."	time := Time now.	Transcript show: time."			(curLevel move) ifTrue: [ "if finished"		Transcript show: 'Level '.		Transcript show: (curLevelIndex + 1).		Transcript show: ': '.				curLevel players doWithIndex: [: player :i | Transcript show: (player points).			                                                          Transcript show: ' ' ].		curLevelIndex :=( (curLevelIndex + 1) \\ levels size).		curLevel := (levels at: (curLevelIndex+1)) new ].										" since indices start at 1"		 		self changed. ! !!PacmanMain methodsFor: 'as yet unclassified' stamp: 'SS 4/29/2012 15:50'!stepTime	^curLevel stepTime.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PacmanMain class	instanceVariableNames: ''!!PacmanMain class methodsFor: 'as yet unclassified' stamp: 'SS 4/27/2012 19:53'!initialize	super initialize.	! !Morph subclass: #Pointlist	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Pacman'!Level initialize!Pacman initialize!PacmanMain initialize!